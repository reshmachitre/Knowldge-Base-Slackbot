Target Schema Definition Language* Overview* Example Target Schema o JSON* Comprehensive Options o parent_id_field_idso product_id_field_ido display_nameso fields * external_id* name* data_type* html_description* field_group_external_id* classifier* read_only* applicable_scopes* requirements* field_values* splitting_setting* members* struct_key * JSON* Applicable Scopes o JSONo A Single Applicable Scopeo Field Conditions* UI FlatteningOverviewThis document describes the JSON format used to create and modify target schemas.Example Target SchemaJSON{	"parent_id_field_ids": ["model", "new_model"],	"product_id_field_id": "sku",	"display_names": {    	"parent_product_type": "Model",    	"child_product_type": "SKU"  	},    "ui_flattening_settings": {        "external_id_delimiter": "`"    },	"fields": [		{			"external_id": "model",			"name": "Model",			"data_type": "enumerated",			"html_description": "<div>The model number of the product.</div>", 			"field_group_external_id": "Basic Attributes",			"applicable_scopes": [				{ "product_type": "parent" }			],			"field_values": [				{					"external_id": "model_1",					"name": "Model 1"				},				{					"external_id": "model_2",					"name": "Model 2"				},				{					"external_id": "new_model",					"name": "New Model"				}			]		},		{			"external_id": "new_model",			"name": "New Model",			"data_type": "string",			"html_description": "<div>The model number of the product if the product is new.</div>", 			"field_group_external_id": "Basic Attributes",			"applicable_scopes": [				{ 					"product_type": "parent",                    "field_conditions": [						{ "field_id" : "model", "values" : ["new_model"] }					]				}			]		},		{			"external_id": "category",			"name": "Category",			"data_type": "enumerated",			"html_description": "<div>Select the best category for this model.</div>", 			"field_group_external_id": "Basic Attributes",			"classifier": true,			"applicable_scopes": [				{ "product_type": "parent" }			],			"field_values": [				{					"external_id": "furniture",					"name": "Furniture",					"assignable": false				},				{					"external_id": "living_room",					"name": "Living Room",					"parent_id": "furniture",					"assignable": false				},				{					"external_id": "sofa_loveseat",					"name": "Sofas and Loveseats",					"parent_id": "living_room"				},					{					"external_id": "recliners",					"name": "Recliners",					"parent_id": "living_room"				}			],			"requirements": [				{					"constraint_type": "min_num_values",					"floor": 1							}			]		},		{			"external_id": "brand",			"name": "Brand",			"data_type": "string",			"html_description": "<div>The brand name of the product.</div>", 			"field_group_external_id": "Basic Attributes",			"applicable_scopes": [				{ "product_type": "parent" }			],			"requirements": [				{					"constraint_type": "min_num_values",					"floor": 1							}			]		},		{			"external_id": "sku",			"name": "SKU",			"data_type": "string",			"html_description": "<div>The product SKU.</div>", 			"field_group_external_id": "Product Features",			"applicable_scopes": [				{ "product_type": "child" }			]		},		{			"external_id": "color",			"name": "Color",			"data_type": "string",			"html_description": "<div>The product color.</div>", 			"field_group_external_id": "Product Features",			"applicable_scopes": [				{ "product_type": "child" }			]		},		{			"external_id": "power_recline",			"name": "Power Recline",			"data_type": "boolean",			"html_description": "<div>Does this chair feature power recline?</div>", 			"field_group_external_id": "Product Features",			"applicable_scopes": [				{					"product_type": "child",                    "field_conditions": [						{ "field_id" : "category", "values" : ["recliners"] },						{ "field_id" : "color", "values" : ["blue", "yellow"] }					]				},                {					"product_type": "child",                    "field_conditions": [						{ "field_id" : "category", "values" : ["recliners"] },						{ "field_id" : "brand", "values" : ["wayfair"] }					]				}			]		},		{			"external_id": "ingredient-quantity",			"name": "Ingredient Quantity",			"data_type": "struct",			"html_description": "<div>Has a unit and quantity.</div>",             "members": [                {					"external_id": "ingredient-quantity.quantity",					"name": "Quantity",	 				"struct_key": "qty",					"data_type": "number",					"html_description": "<div>A positive integer.</div>",                },                {					"external_id": "ingredient-quantity.unit",					"name": "Unit",	 				"struct_key": "unit",					"data_type": "string",					"html_description": "<div>A unit of measure (gram, lbs, etc.).</div>",                }            ]		},    	{      		"external_id": "nutrition_panels",      		"name": "Nutrition Panels",      		"data_type": "struct",			"required": true,      		"splitting_setting": {        		"type": "explosion-by-index",        		"repetition_count": 2      		},			"requirements": [            	{              		"constraint_type": "min_num_values",              		"floor": 1            	}          	]      		"members": [        		{          			"external_id": "nutrition_panels.calories",          			"name": "Calories",          			"data_type": "number",          			"struct_key": "calories"        		},        		{          			"external_id": "nutrition_panels.name",          			"name": "Name",          			"data_type": "string",          			"struct_key": "name"        		},        		{          			"external_id": "nutrition_panels.serving_size",          			"name": "Serving Size",          			"data_type": "string",          			"struct_key": "serving_size"        		},        		{          			"external_id": "nutrition_panels.servings_per_container",          			"name": "Servings Per Container",          			"data_type": "number",          			"struct_key": "servings_per_container"        		}      		]    	},		{			"external_id": "batteries",			"name": "Batteries",			"data_type": "struct",			"html_description": "<div>Has a brand and quantity.</div>",			"splitting_setting": {        		"type": "explosion-by-enumeration",        		"member_struct_key": "type"      		},            "members": [				{					"external_id": "batteries.type",					"name": "Type",	 				"struct_key": "type",					"data_type": "enumerated",					"html_description": "<div>The type of batteries (AA, AAA, D).</div>",					"field_values": [						{							"external_id": "aa",							"name": "AA"						},						{							"external_id": "aaa",							"name": "AAA"						},						{							"external_id": "d",							"name": "D"						}					]                },                {					"external_id": "batteries.brand",					"name": "Brand",	 				"struct_key": "brand",					"data_type": "string",					"html_description": "<div>The brand of batteries.</div>"                },                {					"external_id": "batteries.quantity",					"name": "Quantity",	 				"struct_key": "quantity",					"data_type": "string",					"html_description": "<div>A positive integer.</div>"                }            ]		}	]}Comprehensive Optionsparent_id_field_idsSpecifies the external ids of the fields that should be considered the rollup key. These keys are used to group products into a hierarchy. If this option is not specified, this schema will not create a hierarchy of products.product_id_field_idSpecifies the external id of the field that should be considered the key for a sellable item. This id is used as the unique identifier for each product record.display_namesSpecifies how levels of the product hierarchy will be labeled when presented to suppliers. Levels which can be labeled are parent and child. This element is not required if your schema does not model a hierarchy of products.fieldsThe full list of attributes that you want to accept from your suppliers.external_idThe system identifier for this field, unique in the scope of a single target schema. Used when referencing this field in other parts of the schema definition, and as the field's key during export.nameThe user visible label for this field.data_typeThe data type of this field. Options are string, rich_text, link, html, enumerated, digital_asset, boolean, number, date, and struct.html_descriptionA full-text description of this field, formatted in HTML.field_group_external_idUsed for organizing fields into groups when presented to users. All fields with the same field_group_external_id value, will be in the same group, and the user-visible label for that group will also be the field_group_external_id value.classifierIf true, this field should be treated as the main category of the product.read_onlyIf true, this field and its values are displayed to the user, but its values cannot be changed.applicable_scopesIf provided, this field appears (and a value can be provided) only when these conditions are met. See the Applicable Scopes section for more information.requirementsValues for this field must meet all listed requirements. If any of these requirements are not met, a value and its associated product will be considered "invalid".constraint_type - Identifies the type of requirement that should be applied. applicable_scopes - If provided, this requirement is only enforced when the given conditions are met. See the Applicable Scopes section for more information.Each requirement type may allow additional options. See Requirement Types for a complete list of supported field requirements and their options.field_valuesA list of allowed values for this field. The field must also be typed enumerated.Each enumerated value has the following attributes:external_id - The system identifier and value that will be exported.name -  The user visible label for this value.parent_id -  The external id of the parent of this value. This dictates nesting when displaying possible field values to the user.assignable -  If false, this value cannot be selected (e.g. it is an intermediate level of the hierarchy for display purposes only).applicable_scopes - If provided, this value only appears as an option when the given conditions are met. See the Applicable Scopes section for more information.splitting_settingDefines how struct fields will be split into flat field equivalents. The splitting setting has the following attributes:* type: Either explosion-by-index or explosion-by-enumeration* repetition_count: Required when type is explosion-by-index, must be a positive integer* member_struct_key: Required when type is explosion-by-enumeration, must be a member field's struct keySee the UI Flattening section for more information on how each splitting type worksmembersA list of member fields that belong to a parent field. The field must also be typed struct.struct_keyA key that identifies a member field within a struct–used in Formula mappings as well as the payload which Dandelion sends to connectors. Must be unique within the struct.This field only applies to struct members.Using the ingredient-quantity struct from the above example target schema as an example, its connector service payload would be in the following shape:JSON{  "ingredient-quantity": [    {      "value": {        "qty": [10],        "unit": ["grams"]      }    }  ]}A few things to note here:* The keys of the internal JSON object are the struct_keys of the member fields, not their external IDs* The "value" singleton object only appears below top-level fields, not member fieldsApplicable ScopesAn applicable scope determines where and when the entity it appears on is relevant.JSON// A single sub-scope dictating that this field appears on child products, when the category is sofa_loveseat or recliners and length has any value."applicable_scopes": [	{		"product_type": "child",        "field_conditions": [			{ "field_id" : "category", "values" : ["sofa_loveseat", "recliners"] },			{ "field_id" : "length", "values" : "any" }		]	}]At the first level is a list of sub-scopes. When any of these sub-scopes are satisfied, the entity is considered applicable.A Single Applicable ScopeEach sub-scope is applicable when all of its conditions are met.The two types of conditions are:product_type - This entity appears on either the parent or child hierarchy level. This is not applicable if your schema does not model a hierarchy of products.field_conditions -  This entity appears when certain fields have certain values.Field ConditionsThe value of field_conditions is a list. The field condition list is only true if all sub-elements in the list are true.An individual condition is a pair of field and values:field_id - The external id of the field.values - When the referenced field has any of the given values, this condition is met. In this case, the referenced field must be enumerated.If this scope should apply when the referenced field has any value(s), specify any. If this field should apply when the referenced field has no value(s), specify none. In this case, the referenced field can be of any typeUI FlatteningUI Flattening is a framework that allows Target Schema Developers to define Fields using nested JSON objects. See UI Flattening for more details.